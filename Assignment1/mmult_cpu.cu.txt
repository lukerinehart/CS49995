// Luke Rinehart
// GPU parallel processing Assignment 1
// CPU matrix mult

#include <cuda.h>
#include <cuda_runtime.h>
#include <time.h>
#include <stdio.h>


void mMul(int *A, int *B, int *C, int size)
{
for(int i = 0; i<size; i++)
    {
        for(int j = 0; j<size; j++)
        {
            for(int k = 0; k<size; k++)
            {
                C[i*size+j]+=(A[i*size+k]*B[k*size+j]);
            }
        }
    }
}

int main(){

 cudaEvent_t start, stop;
 cudaEventCreate(&start);
 cudaEventCreate(&stop);

 int size = 256;
 int A[size*size];
 int B[size*size];
 int C[size*size];

 srand(time(0));  
    for(int i = 0; i < size*size; ++i){ 
        A[i] = rand() % 2;
        B[i] = rand() % 2; 
    }

 cudaEventRecord(start);

 mMul(A,B,C,size);

 cudaEventRecord(stop);
 cudaEventSynchronize(stop);
 
 float milliseconds = 0;
 cudaEventElapsedTime(&milliseconds, start, stop);
 printf("%f ms\n", milliseconds);

}
